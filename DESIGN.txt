# Zwörg Language Design Document

## Overview

The language is a statically-typed imperative language with primitive types,
variables and constants, control flow statements, functions, structs, arrays,
tuples, light-weight object-oriented features, and expressions with operator
precedence.

The end goal is a lightweight language that's easy on the eye, easy and fun to
write in, with a concise and logically consistent syntax.
But the most important point is that it will transpile to portable standalone
C code.

Targeting C has the following benefits:

- existing codegen backends for any architecture in existence
- very high speed thanks to decades of C compiler tuning when using e.g. GCC
- the resulting code can be shipped as one or more C files to the consumer,
  who doesn't need to install yet another compiler for yet another exotic new
  language.
- the easiest possible way to benefit from the huge library ecosystem writing
  in, or using the C ABI.
- with tinycc, there's an extremely fast (regarding its own execution speed)
  C compiler available that can be used for a fast development cycle.
  It's almost as fast as Turbo Pascal in the DOS days, which was written in
  hand-optimized assembly for a 16-bit CPU.

There's a number of other languages using C as a backend, but they typically
emit non-portable code with lots of target specific assumptions, so if one
wants to circumvent the need to have a compiler for the language in question
installed on the target machine, one has to pre-generate different C code for
every possible arch/OS/libc combination in existence.
They also often depend on a big amount of auxiliary files installed in compiler-
specific directories. Zwörg instead will likely offer a way to generate a single
C file with all used "stdlib" dependencies included, so one could literally
share an entire program using nothing but a pastebin site.

The vision is that the language is about as simple to use as python, but with
the speed of a compiled language and the portability of C.
And a C coder who wants well-performing portable code can use it to benefit
from modern comforts such as concatenating strings with the + operator, or some
built-in data structures like hashmaps and dynamic arrays.

Python 2.7 was chosen as the current implementation language because writing
a compiler is a huge task and it's far easier to achieve in a dynamic language.
Only a subset of Python 2.7 that's compatible with Python 3 is used for the
implementation, with care taken to not use functional or dynamic language
features that are absent in other languages.
Eventually, when the language is more mature, we might make the compiler
self-hosted, which unlike in the case of rust, java, and others, will be easy
to bootstrap because of the portable C it outputs.

Currently only a slow interpreter is implemented to verify the correctness of
the compiler.

Garbage collection is planned in the form of reference counting, but it might
turn out that manual memory management can be made so simple it's no longer
a chore.

## 1. Lexical Elements

### 1.1 Identifiers
- Begin with a letter or underscore
- Can contain letters, digits, and underscores
- Case-sensitive

### 1.2 Keywords
The language reserves the following keywords:
- 'var': Variable declaration
- 'const': Constant declaration
- 'if', 'else', 'end': Conditional statements
- 'while': Looping construct
[TODO - for loop will come in the future once we figured out the details for container semantics]
- 'break', 'continue': Loop control
- 'and', 'or', 'xor': Logical operators
- 'bitnot': Unary bitwise NOT
- 'shl', 'shr': Shift operators
- 'print': Output statement
- Type specifiers:
  - Integer types: 'int', 'uint', 'long', 'ulong', 'longlong', 'ulonglong'
  - Fixed-size integers: 'i8', 'u8', 'i16', 'u16', 'i32', 'u32', 'i64', 'u64'
  - Tuple types: Composite types represented as {type1, type2, ...}
  - Float types: 'float', 'double'
  - Other: 'string'
- 'def': Function declaration
- 'return': Return statement
- 'struct': Struct definition
- 'new': Heap allocation
- 'del': Heap deallocation

### 1.3 Literals
- Integer literals: Sequence of digits (e.g., '123')
  - Can be decimal or hexadecimal (0x prefix), binary (0b prefix) or octal (0 prefix).
  - Can contain underscores at arbitrary positions, a feature most often used for thousand separators like 1_000.
- Integer literals can have the following suffixes:
  - 'u' for unsigned integers (e.g., '123u')
  - 'l' for long integers (e.g., '123l')
  - 'ul' for unsigned long integers (e.g., '123ul')
  - 'll' for long long integers (e.g., '123ll')
  - 'ull' for unsigned long long integers (e.g., '123ull')
- Float literals: Digits with decimal point (e.g., '3.14')
  - Can have 'f' suffix for float type (e.g., '3.14f')
  - Can have 'd' suffix for double type (e.g., '3.14d')
  - No suffix defaults to double type
- Float literals must have at least one digit after the decimal point ('5.' is invalid, must be '5.0')
- String literals: Text surrounded by double quotes (e.g., "Hello, world!")
  - Support escape sequences: \n, \t, \r, \", \\

Note that all suffixes and hex literals support only lowercase.

### 1.4 Comments
- C++-style single-line comments beginning with '//'
- C-style block comments between /* and */

## 2. Types

### 2.1 Type System
The language has a static, manifest typing system with the following types:

Primitive Types:
- Integer Types:
  - 'int': Default signed integer (32-bit)
  - 'uint': Default unsigned integer (32-bit)
  - 'long': Long signed integer (implementation defined - either 32 or 64 bit depending on register size, just like in C)
  - 'ulong': Long unsigned integer (implementation defined - either 32 or 64 bit depending on register size, just like in C)
  - 'longlong': Long long signed integer (64-bit, guaranteed)
  - 'ulonglong': Long long unsigned integer (64-bit, guaranteed)

- Fixed-size Integer Types:
  - 'i8', 'u8': 8-bit signed/unsigned
  - 'i16', 'u16': 16-bit signed/unsigned
  - 'i32', 'u32': 32-bit signed/unsigned
  - 'i64', 'u64': 64-bit signed/unsigned

- Floating Point Types:
  - 'float': Single precision (32-bit)
  - 'double': Double precision (64-bit)

- Other Types:
  - 'string': Text string values

Composite Types:
- Struct types: User-defined composite types
- Tuple types: Anonymous composite types with ordered fields
- Reference types: Created when allocating structs with 'new'
- Array types: Fixed- or dynamic-size collections of elements of the same type.
- Reference parameters: Created with 'byref' keyword

### 2.2 Type Compatibility and Promotion
- String type compatibility is strict - only same types can be assigned directly.
- Type promotion rules for numeric types follow C - anything is allowed.
  [TODO] Though I'm open to improve upon it if good a good case can be made for
  specific situations where this is suboptimal.
- Tuples require exact type matches for each component.
- For struct types:
  - Value types (stack allocated) require exact type matches
  - [TODO] Reference types (heap allocated) allow derived-to-base conversion

### 2.3 Type Inference
- Types can be inferred from initializers using the ':=' operator
- The compiler determines the most specific type that can hold the initializer value
- [TODO] untyped function parameters in function declarations shall act as a poor man's
  generics replacement - such a function shall be specialized to the type of the specific
  arguments that's passed in at the call-site.

### 2.4 References
- References are created with the 'byref' keyword for parameters
- Functions can return references with ':byref type' return type annotation
- References can only point to:
  - Global variables
  - Parameters passed by reference
  - Heap-allocated objects
- References to local variables cannot be returned (enforced at compile-time)
- References to struct fields are not supported

## 3. Declarations

### 3.1 Variable Declarations
Variables must be declared before use with an initializer:

EXAMPLE:
var <identifier> := <expression>          // Type inferred from expression
var <identifier> : <type> = <expression>  // Type explicitly specified with initializer
var <identifier> : <type>                 // Type explicitly specified with default initialization

Examples:
var x := 5;            // Type inferred as int
var y : float = 3.14;  // Type explicitly specified
var z := 42u;          // Type inferred as uint
var w : long = 42l;    // Type explicitly as long
var s := "Hello";      // Type inferred as string
var i : int;           // Default initialized to 0
var f : float;         // Default initialized to 0.0
var str : string;      // Default initialized to ""

Array declarations:
var arr: int[5] = {1, 2, 3, 4, 5};  // Fixed-size array with explicit initialization
var inferred: int[] = {10, 20, 30}; // Array size inferred from initializer
var defaulted: int[5];              // Fixed-size array with default initialization (all zeros)
var dynamic: int[] = nil;           // Dynamic array initialized to nil (no storage allocated yet)

### 3.2 Constant Declarations
Constants are declared with 'const' and must have an initializer:

EXAMPLE:
const <identifier> [: <type>] := <expression>;  // Type inferred
const <identifier> : <type> = <expression>;     // Type explicitly specified

Constants cannot be reassigned after declaration.

### 3.3 Function Declarations
Functions are declared with the 'def' keyword:

EXAMPLE:
def <function_name>([<param_name>: <param_type>, ...]) [: <return_type>] do
    <statements>
end

- Parameters must have explicit type annotations
  [TODO: in the future, allow usecase for generics as mentioned earlier]
- Return type is optional (defaults to 'void' if not specified)
  The 'void' type cannot be explicitly used, only implicitly by omitting the return type.
- All functions require a 'do' ... 'end' block.
[TODO in the future it shall be possible to have optional parameters with a default value
 at the tail of the parameter list, for example def foo(bar:int, baz:double=0.0, blah:=0)
 it shall support the type inference operator for those]
Examples:
def add(a: int, b: int): int do
    return a + b;
end

def print_message(msg: string) do
    print msg;
end

Reference parameters and return values:
def modify(byref x: int) do  // x is passed by reference
    x = x * 2;               // Modifies the original variable
end

def get_ref(byref x: int): byref int do  // Returns a reference to x
    return x;                            // Can be assigned to directly
end

get_ref(value) = 42;  // Assigns 42 to the variable that x references

### 3.4 Struct Declarations
Structs are declared with the 'struct' keyword:

EXAMPLE:
struct <struct_name> [:<parent_struct>] do
    <field_name>: <field_type>
    // ... more fields
end

Methods are declared outside the struct:
def <struct_name>.<method_name>([params])[: return_type] do
    // method body with access to 'self'
end

Special Methods:
- Constructor: init() - Called when struct is created
- Destructor: fini() - Called when struct is destroyed

Examples:
struct Point do
    x: int
    y: int
end

def Point.init(x_val: int, y_val: int) do
    self.x = x_val
    self.y = y_val
end

struct Circle:Shape do
    radius: float
end

### 3.5 Tuple Declarations
Tuples represent ordered collections of values with different types.
They are implemented as anonymous structs with sequentially numbered fields.

Tuple type declarations:
def function_name(): {type1, type2, ...} do
    // Returns a tuple
end

var x: {int, float};  // Variable with tuple type

Tuple Creation:
return {value1, value2};  // Return a tuple from a function
var coords := {10, 20};   // Create a tuple with type inference
var point: {int, int} = {30, 40};  // Create a tuple with explicit type
const x_coord:= point._0;  // access first tuple element

Tuple types can be used anywhere a type is expected.

### 3.6 Array Declarations
Arrays represent collections of elements with the same type, either fixed-size
or dynamic.

Fixed-sized arrays require either the array dimensions specified, or an
initializer expression which is used to infer the size, e.g.:
var fixed:int[] = {1,2,3} // inferred as int[3]

Dynamic arrays are always heap allocated with the new keyword,
or initialized to nil, e.g.:
var dynamic:int[] // nil-initialized, must be resized with new() before access

Multi-dimensional arrays are not supported at this point.
They can be easily emulated with a flat array and some arithmetic.

Array type declarations:
var arr: int[5];                // Fixed-size array of 5 integers
var arr2: int[5] = {1, 2, 3};   // Fixed-size array with first 3 elements initialized, rest are 0
var arr3: int[] = {1, 2, 3};    // Fixed-size array with size inferred from initializer
var arr4: int[];                // Dynamic array default-initialized to nil (no storage allocated yet)
var arr5: int[] = nil;          // Dynamic array initialized to nil (not allocated yet)

Array initialization:
var arr: int[3] = {1, 2, 3};    // Initialize with values
var inferred: int[] = {4, 5, 6}; // Size inferred from initializer

Heap allocation with 'new':
var heapArr := new int[5];           // Heap-allocated array with default initialization
var objArray := new Point[2](0, 0);  // Array of Points with constructor arguments (constructor is called on all elements with same values)
var resized := new(oldArray, 10);    // Resize an existing array to a new size, copying existing elements (realloc-like behavior)

Array operations:
arr[0] = 10;                    // Element assignment
var x := arr[1];                // Element access

Arrays can be passed to functions either by value or by reference:
def modify_array(byref arr: int[3]) do  // By reference
    arr[0] = 99;                        // Modifies the original array
end

def copy_array(arr: int[3]) do          // By value
    arr[0] = 99;                        // Does not modify the original
end

Resize a dynamic array:
var arr:u8[]                            // defaults to nil
arr = new(arr, 5);                      // Resizes array to 5 elements
arr[3] = 42;                            // Access new elements

### 3.7 Type Aliases (Typedefs)
Type aliases allow creating alternative names for existing types:

EXAMPLE:
typedef <alias_name>: <target_type>

Examples:
typedef Integer: int           // Simple type alias
typedef Points: int[5]         // Array type alias
typedef MyTuple: {int, string} // Tuple type alias [TODO: untested]

Type aliases are resolved at compile time and have no runtime overhead.
They provide better code readability and allow for easier type refactoring.

[TODO] In the future, function prototype typedefs looking like
typedef Callback:(x:int, y:int):long will make it possible to define types
that can be used for function callbacks.

### 3.8 Enum Declarations
Enums provide a way to define named constants:

EXAMPLE:
enum <enum_name> [: <base_type>] do
    <member_name> [= <value>]
    // ... more members
end

Examples:
enum Color do
    Red    // Implicitly 0
    Green  // Implicitly 1
    Blue   // Implicitly 2
end

enum FileMode : u8 do
    Read = 1
    Write = 2
    ReadWrite = 3  // Can specify explicit values
end

Enums create a type alias to their base type (int by default) and a constant
with the enum name that can be used to access the enum values (e.g., Color.Red).

## 4. Statements

### 4.1 Expression Statements
Any expression can be used as a statement. Additionally, assignments can be used as expressions within control flow conditions:

EXAMPLE:
while (x = y * 3) > 0 do
    print x;
    x = x - 1;
end

### 4.2 Conditional Statements
Each 'if' statement requires a scope block ('do ... end') after the condition expression:

EXAMPLE:
if <expression> do
    <statements>
end

if <expression> do
    <statements>
end else do
    <statements>
end

if <expression> do
    <statements>
end else if <expression> do
    <statements>
end

Note: Each 'if' or 'else' statement must followed by a block scope.

### 4.3 Loop Statements
Loops use 'while' followed by a condition expression and a block scope.

EXAMPLE:
while <expression> do
    <statements>
end

### 4.4 Loop Control
Loops can be controlled with:
- 'break': Exit the innermost loop
- 'continue': Skip to the next iteration of the innermost loop

### 4.5 Print Statement
Output is done with the 'print' keyword:
[TODO] This exists only during the prototype stage and will be removed once a stdlib is born.

EXAMPLE:
print <expression>;

### 4.6 Return Statement
Functions use the 'return' statement to provide a return value:

EXAMPLE:
return <expression>;  // For functions with a return type
return;               // For void functions

### 4.7 Memory Management Statements
Heap allocation and deallocation:

EXAMPLE:
var ref: StructName = nil;       // Initialize reference to nil (no allocation)
var obj := new StructName(args); // Allocate on heap - creates reference type
var arr := new ArrayType[size];  // Allocate array on heap - creates reference type
del obj;                         // Deallocate and call destructor

## 5. Expressions

### 5.0 Tuple Expressions
Tuples are created using curly braces containing comma-separated expressions:
{expr1, expr2, ...}

Elements of a tuple can be accessed using struct-like field syntax.
The first element is `._0`, the second `._1`, etc.

### 5.0a Array Expressions
Array elements are accessed using square brackets:
array[index]

Array elements can be used in expressions:
var sum := array[0] + array[1];

Arrays can be initialized with curly braces:
{value1, value2, ...}

Nested arrays can be initialized with nested curly braces:
{{value1, value2}, {value3, value4}}

### 5.1 Arithmetic Operators
- Addition: '+'
- Subtraction: '-'
- Multiplication: '*'
- Division: '/' (integer division for int operands, float division otherwise)
- Modulo: '%'

### 5.2 Compound Assignment Operators
- '+=': Add and assign
- '-=': Subtract and assign
- '*=': Multiply and assign
- '/=': Divide and assign
- '%=': Modulo and assign

### 5.3 Comparison Operators
- Equal: '=='
- Not equal: '!='
- Greater than: '>'
- Less than: '<'
- Greater than or equal: '>='
- Less than or equal: '<='

### 5.4 Logical Operators
- AND: 'and'
- OR: 'or'
- NOT: '!'

### 5.5 Bitwise Operators
- AND: '&'
- OR: '|'
- XOR: 'xor'
- NOT: 'bitnot'
- Shift left: 'shl'
- Shift right: 'shr'

Bitwise operations:
- Only allowed on integer types
- Result is masked to the size of the largest operand type
- Sign-extended for signed types in right shifts
- Zero-extended for unsigned types in right shifts
TL;DR - should behave exactly as in C. If not, it's a bug.

### 5.6 Member Access Operators
- Dot operator: '.'  (for accessing struct fields and methods)

### 5.7 Operator Precedence
This is modelled after python, since C's precedence rules are b0rked.
And (almost) everybody knows python, and they got this right (IMO).
If something here actually differs from python, it's a bug.
From lowest to highest:
1. Assignment operators ('=', '+=', '-=', etc.)
2. Logical OR ('or')
3. Logical AND ('and')
4. Comparison operators ('==', '!=', '>=', '>', '<=', '<')
5. Bitwise OR ('|')
6. Bitwise XOR ('xor')
7. Bitwise AND ('&')
8. Addition and subtraction ('+', '-')
9. Multiplication, division, modulo, and shifts ('*', '/', '%', 'shl', 'shr')
10. Unary operators (unary '-', '!', 'bitnot')
11. Member access ('.')

## 6. Evaluation Rules

### 6.1 Boolean Context
- Boolean expressions in conditions result in 1 (true) or 0 (false)
- Any non-zero value is considered true in conditions

### 6.2 Type Rules
- Binary operations between two values of the same type result in that type
- Type promotions follow the precedence rules defined in section 2.2
- Comparison and logical operations always return an 'int' (0 or 1)
- Bitwise operations require integer operands and return an integer type
- String concatenation is performed with the '+' operator when both operands are strings
TL;DR: C rules, except for the string type which C doesn't have.

### 6.3 Division
- Division between two integer values performs integer division (truncation)
- Division with at least one floating point operand performs floating-point division
- Division between signed integers follows C rules for truncation toward zero
- Division between unsigned integers performs unsigned division
TL;DR: C rules.

## 7. Scope Rules

- Variables must be declared before use
- Variables cannot be redeclared in the same scope
- The 'do ... end' blocks create new block scopes [TODO check wether variables created in deep scopes actually aren't visible in parent scopes]
- Functions have their own scope
- Structs define a scope for their fields and methods
- Child structs have access to parent fields through inheritance

## 8. Error Handling

### 8.1 Statement Termination
- Multiple statements on the same line must be separated by semicolons
- If a statement is not terminated by a newline, a semicolon is required

EXAMPLE:
var x := 5; var y := 10; // Multiple statements on one line require semicolons
var z := 15               // No semicolon needed if followed by a newline

The language reports various errors:
- Type mismatch errors
- Undeclared variable errors
- Syntax errors
- Assignment to constants
- Missing semicolons between statements on the same line
- Undefined struct fields or methods
- Invalid arguments to functions or methods
- Memory management errors
- Constructor argument errors for struct arrays initialization

## 9. Object-Oriented Features

### 9.1 Structs and Methods
- Structs are user-defined composite types with fields
- Methods are defined for structs using the syntax:
  
  def StructName.method_name([params]): [return_type] do
      // method body
  end
  
- The 'self' keyword refers to the struct instance in method bodies
- 'self' is always treated as a reference type in methods
- Methods can access fields and other methods of the struct

### 9.2 Inheritance
- Structs can inherit from a parent struct using the syntax:
  
  struct ChildName:ParentName do
      // additional fields
  end
  
- Child structs inherit all fields and methods from parent structs.
  - Member fields of the parent are inserted at the top of the struct to allow casting in the future C backend.
- Method overriding is supported (a child can define a method with the same name as a parent)
- Reference types support polymorphic assignment (derived to base)
- Value types require exact type matches for assignment

### 9.3 Constructors and Destructors
- Constructors are defined as methods named 'init'
- Constructor calls with arrays use the syntax: StructName[size](arg1, ...)
- Destructors are defined as methods named 'fini'
- Constructors are called automatically when:
  - A struct is stack allocated with direct initialization
  - A struct is heap allocated with 'new'
- Destructors are called automatically when:
  - A heap-allocated object is deallocated with 'del' [TODO in future when it's no longer referenced too]
  - A stack-allocated object goes out of scope

### 9.4 Memory Management
- Stack allocation: var obj := StructName(args);
  - Object lifetime tied to scope
  - Value semantics for assignment [TODO figure out how we can pass both value-type structs and ref-structs to functions taking that type once we have the C backend, so only one function copy needs to be emitted for both usecases. probably easiest to make an explicit copy on the stack and pass a pointer to that in the value-type scenario]
  - Exact type matching required
- Heap allocation: var obj := new StructName(args);
  - Creates a reference type
  - Reference semantics for assignment
  - Supports polymorphic assignment
  - Must be explicitly deallocated with 'del' [TODO this will be relaxed in the future IFF ref-counting is implemented - then del CAN be used, but the object will be deallocated when no refs exist]
  - Array allocation: var arr := new StructType[size]
    - Zero-initializes all elements by default
    - With parentheses: var arr := new StructType[size](args)
      - Calls constructor for each element with the same arguments
  - nil reference value:
    - Used for uninitialized references: var ref: StructType = nil
    - Used for uninitialized dynamic arrays: var arr: Type[] = nil
    - Reference comparison: if ref == nil do ... end
    - Boolean context: if !ref do ... end  (nil evaluates to false)

## 10. Semantics Highlights

- **Static Typing**: All variables have a determined type at compile time [TODO this will be relaxed by allowing to omit the type, in which case the backend shall use a dynamic type unless the type can be infered during the program flow at compile time.]
- **Type Inference**: Types can be inferred from initializers [TODO plus more in the future, see above]
- **No Implicit Conversions**: Type promotions only follow defined rules (Yeah, C's :-)
- **Boolean Representation**: Boolean values are represented as integers (0=false, non-zero=true) [TODO we might add those later]
- **Mandatory Initialization**: All variables must be initialized at declaration [TODO will probably also be relaxed]
- **Statement Termination**: Statements on the same line must be separated by semicolons
- **Control Flow Nesting**: Proper nesting of control structures with explicit 'do ... end' blocks
- **Extended Type System**: Support for fixed-size integers, unsigned types, and double precision floats
- **C-Style Type Semantics**: Division, comparison, and other operations follow C language rules
- **All of those were selected to make C interop as painless as possible.
- **Object-Oriented Features**:
  - Structs with methods
  - Single inheritance
  - Constructors and destructors
  - Reference/value type distinction
  - Polymorphism for reference types
  - Array constructor support with consistent arguments
- **Memory Management**: Manual memory management with deterministic cleanup [TODO ref-counting is planned for future, though manual new/del will be allowed regardless]
- **Nil References**: Support for null references with consistent semantics
  - Used to represent uninitialized or invalid references

## 11. Collection Types and Initializers

### 11.1 Tuples
- Tuples are lightweight, fixed-size collections of heterogeneous values
- Implemented as anonymous structs with sequentially numbered fields
- Created using curly brace syntax: {value1, value2, ...}
- Type notation uses the same syntax: {type1, type2, ...}
- Unlike structs, tuple fields are referenced by position rather than name

### 11.1a Arrays
- Arrays are fixed-size collections of homogeneous values
- Declared using bracket syntax after the type: int[5]
- Size can be inferred from initializer: int[] = {1, 2, 3}
- Dynamic arrays can be declared with nil: int[] = nil
- ... or can be allocated on heap using 'new': new int[5]
- Initialized with curly braces: {value1, value2, ...}
- Resized using new with existing array: new(array, new_size)
  - If successful, returns a new array with copied elements and frees the old array
  - If allocation fails, returns nil and leaves the original array untouched
  - Like realloc() in C, but with explicit error handling through nil
- Elements accessed using array indexing syntax: array[index]
- Arrays can be passed by value or by reference to functions
- When passed by value, a copy of the array is made
- When passed by reference (using byref), the original array can be modified

### 11.2 Collection Initializers
Curly braces are used consistently across different collection types:

- Tuples: {value1, value2, ...}
- Struct initializers: {1, 2, 3}
- Named Struct initializers: {.field1=value1, .field2=value2} [TODO]
- Array initializers: {value1, value2, value3}
  Partial initialization is supported for arrays with explicit size, it's
  possible to e.g. initialize an int[3] with = {0,1}. The not listed members
  will be initialized with zero or "" for strings. Initialization starts with
  the first struct/array member.

Similarities and differences:
- All use curly braces {} for consistent syntax
- Struct initializers use field names with dot prefix
- Tuples and arrays use positional initialization
- Type inference works with all forms

Examples:
var point := {10, 20};                  // Tuple with inferred type {int, int}
var p: Point = {.x=1, .y=2};            // Struct with named fields
var fixed: int[10] = {1, 2, 3, 4, 5};   // Fixed-size array, remaining elements initialized to 0
var rect: Rect = {{1, 2}, {3, 4}};    // Nested initializer for struct with struct fields

## 12. Reference Semantics

### 12.1 Reference Types
- References are pointers to values that can be reassigned
- Two kinds of references exist:
  - Stack references (created with 'byref' keyword for function parameters)
  - Heap references (created with 'new' for dynamic allocation)

### 12.2 Reference Assignment Rules
- When assigning to a variable containing a reference:
  - If the reference is nil OR the right side is an array resize operation (new(oldvar, newsize)):
    - Direct assignment (the reference itself is updated)
  - Otherwise:
    - Assignment through the reference (the referenced value is updated)

### 12.3 Reference Comparison Rules
- When comparing references with == or != operators:
  - References are compared by identity (like pointer comparison in C)
  - Two references are equal if they point to the same object
  - A reference is equal to nil if and only if it is nil
- Attempting to assign through a nil reference will raise a runtime error

### 12.4 Memory Management with References
- The 'del' operator:
  - Calls the destructor if defined
  - Frees the heap-allocated memory
  - Sets the reference to nil automatically, allowing it to be reused
